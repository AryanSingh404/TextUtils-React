{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","msg","Navbar","mode","href","title","onClick","toggleMode","id","htmlFor","modeText","TextForm","useState","text","settext","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","output","document","getElementById","input","i","length","charCodeAt","toString","split","App","setAlert","message","setTimeout","setModeText","setmode","AboutText","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a595651c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n            <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n        </div> \r\n            )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            {/* <nav className={`navbar navbar-expand-lg navbar-${props.greenMode}} bg-${props.greenMode}`}> */}\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode}} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title} </a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    {/* <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\"> */}\r\n                            {/* <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                            </li> */}\r\n                            {/* <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"/about\">{props.AboutText}</a>\r\n                            </li> */}\r\n                        {/* </ul> */}\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                    {/* </div> */}\r\n                    {/* <div className={`form-check form-switch text-${props.greenMode === 'light' ? 'dark' : 'light'} `}>\r\n                        <input  onClick={props.toggleGreenMode} className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label mx-2\" htmlFor=\"flexSwitchCheck\">{props.greenModeText}</label>\r\n                    </div> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} `}>\r\n                        <input onClick={props.toggleMode} className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.modeText}</label>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpclick = () => {\r\n        let newText = text.toUpperCase();\r\n        settext(newText)\r\n        props.showAlert(\"The text in uppercase \" , \"success\");\r\n    }\r\n    \r\n    const handleLoclick = () => {\r\n        let newText = text.toLowerCase();\r\n        settext(newText)\r\n        props.showAlert(\"The text in Lowercase \" , \"success\");\r\n    }\r\n    \r\n    const handleClearText = () => {\r\n        let newText = \"\";\r\n        settext(newText)\r\n        props.showAlert(\"Text was cleared \" , \"success\");\r\n    }\r\n\r\n    const handleBinary =()=> {\r\n        \r\n        let output = document.getElementById(\"myform\");\r\n        let input = document.getElementById(\"myform\").value;\r\n        output.value = \"\";\r\n        for (var i = 0; i < input.length; i++) {\r\n            output.value += input[i].charCodeAt(0).toString(2) + \" \";\r\n        }\r\n        // props.showAlert(\"The text is in Binary form \" , \"success\");\r\n    }\r\n    \r\n    \r\n    const handleOnchange = (event) => {\r\n        settext(event.target.value)\r\n        \r\n    }\r\n\r\n    // for set text value \r\n    const [text, settext] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h1 style={{color: props.mode=== 'dark'? 'white' : 'black'}}>{props.heading}</h1>\r\n                <div className=\"mb-3\" >\r\n                    <textarea  className=\"form-control\" value={text} onChange={handleOnchange}  style={{backgroundColor: props.mode === 'dark'?'rgb(77, 77, 77)':'white' , color: props.mode=== 'dark'? 'white' : 'black'}} id=\"myform\" rows=\"8\" ></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpclick} >Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary \" onClick={handleLoclick} >Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleBinary} >Binary Convert</button>\r\n                <button className=\"btn btn-primary \" onClick={handleClearText} >Clear Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode=== 'dark'? 'white' : 'black'}} >\r\n                <h2>Your Text Summary</h2>\r\n                <p> {text.split(\" \").length} Words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length}  Minutes Read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0 ? text: \"Enter something in the text box above to preview it here --- Happy Writting : )\"} </p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n    ","import React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n  \n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  // Alert messages \n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message , type)=>{\n    setAlert({\n      msg : message,\n      type : type \n    })\n\n    setTimeout(()=>{\n      setAlert(null);\n    }, 900);\n\n  }\n  \n  const [modeText, setModeText] = useState(\"Enable Dark Mode\")\n  \n  const [mode, setmode] = useState('light')\n  \n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark')\n      setModeText('Enable light Mode')\n      document.body.style.backgroundColor = \"rgb(32, 53, 81)\"\n      showAlert(\"Dark mode is enabled\" , \"success\")\n    }\n    else {\n      setmode('light')\n      setModeText('Enable Dark Mode')\n      document.body.style.backgroundColor = \"white\"\n      showAlert(\"Light mode is enabled\"  , \"success\")\n    }\n  }\n\n  // const [greenModeText, setGreenModeText] = useState(\"Enable Green Mode\")\n  \n  // const [greenMode, setGreenMode] = useState('light')\n  \n  // const toggleGreenMode = () => {\n  //   if (greenMode === 'light') {\n  //     setGreenMode('dark')\n  //     setGreenModeText('Enable light Mode')\n  //     document.body.style.backgroundColor = \"#014601f0\"\n  //     showAlert(\"Green Dark mode is enabled\" , \"success\")\n  //   }\n  //   else {\n  //     setGreenMode('light') \n  //     setGreenModeText('Enable Green    Mode')\n  //     document.body.style.backgroundColor = \"white\"\n  //     showAlert(\"Light mode is enabled\"  , \"success\")\n  //   }\n  // }\n  // toggleGreenMode={toggleGreenMode} greenMode={greenMode} greenModeText={greenModeText} \n\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" AboutText=\"About Us\" mode={mode} toggleMode={toggleMode} modeText={modeText} />\n      <Alert  alert= {alert} />\n\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"This is your box use this piece of shit_   :/ !\" mode={mode} /> \n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}